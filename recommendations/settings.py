"""
Django settings for recommendations project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see:
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see:
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import environ
import os

# Initialize environment variables
env = environ.Env()

# Set the base directory (the root directory of the Django project)
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from the .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# SECURITY WARNING: Keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: Don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

# Allowed hosts for the Django server (set in .env)
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',  # Custom API app
    'rest_framework',  # Django REST framework for API development
    'corsheaders',
]

# Middleware configurations
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

# Root URL configuration
ROOT_URLCONF = 'recommendations.urls'

# Template configurations
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Set a directory for custom templates if needed
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application
WSGI_APPLICATION = 'recommendations.wsgi.application'

# Database configuration (Using PostgreSQL)
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",  # Database engine
        "NAME": env("DB_NAME"),  # Database name from .env
        "USER": env("DB_USER"),  # Database user from .env
        "PASSWORD": env("DB_PASSWORD"),  # Database password from .env
        "HOST": env("DB_HOST"),  # Database host from .env
        "PORT": env("DB_PORT"),  # Database port from .env
    }
}

# Password validation for user authentication
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization settings
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# API keys and third-party service configurations
PINECONE_API_KEY = env("PINECONE_API_KEY")

# Static files settings (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True

